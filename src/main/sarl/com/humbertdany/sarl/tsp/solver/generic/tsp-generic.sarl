package com.humbertdany.sarl.tsp.solver.generic

import com.humbertdany.sarl.tsp.tspgraph.TspGraph
import com.humbertdany.sarl.tsp.solver.aco.EnvironmentListener
import io.sarl.core.Initialize
import com.humbertdany.sarl.tsp.solver.ASarlSolver
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import io.sarl.core.Logging
import javafx.application.Platform
import java.util.ArrayList
import java.util.List
import com.humbertdany.sarl.tsp.tspgraph.TspVertex

event StopSolvingEvent {
}

event NewGraphState {
	var graph : TspGraph
}

event StartSolvingEvent {
	var graph : TspGraph
}

event NewBestPath {
	var flow : List<TspVertex>
	var cost : double
}

abstract agent ALauncher {

	uses DefaultContextInteractions, Lifecycle, Schedules

	/** 
	 * Store all the variables
	 * that will require to be triggered
	 * on the new states (the solver, etc.)
	 * ! These should only be Java object
	 * if a SARL require it, use the Events
	 * to benefit of parallelism 
	 */
	var listeners = <EnvironmentListener>newArrayList
	
	/** 
	 * The TspGraph currently solving
	 */
	var graph : TspGraph;
	
	/**
	 * Store a ASolver reference to call useful methods
	 */
	var solver : ASarlSolver;
	
	on Initialize {
		solver = occurrence.parameters.get(0) as ASarlSolver
		listeners.add(solver)
		solver.setEventSpace(defaultSpace);
		solver.sarlReady();
	}
	
	on NewBestPath {
		solver.runLater(new NewBestPathRunnable(listeners, occurrence.flow, occurrence.cost)); 
	}

	on StopSolvingEvent {
		in(100)[
			killMe
		]
	}

	on NewGraphState {
		graph = occurrence.graph;
	}

	on StartSolvingEvent { 
		this.graph = occurrence.graph
		emit(new NewGraphState => [graph = this.graph])
	}

	def fireNewState {
		if (graph != null) {
			solver.runLater(new JfxInfoRunnable(listeners, graph)); 
		}
	}

}

/** 
 * Runnable used to inform the main Application
 * (running on JavaFX Thread) 
 * of all the changes we have to 
 */
class JfxInfoRunnable implements Runnable {

	var listeners : ArrayList<EnvironmentListener>
	var graph : TspGraph

	new(listeners : ArrayList<EnvironmentListener>, graph : TspGraph) {
		this.listeners = listeners;
		this.graph = graph;
	}

	override run {
		for (listener : this.listeners) {
			listener.newGraphState(graph)
		}
	}

}

class NewBestPathRunnable implements Runnable {

	var listeners : ArrayList<EnvironmentListener>
	var flow : List<TspVertex>
	var cost : double;

	new(listeners : ArrayList<EnvironmentListener>, flow : List<TspVertex>, cost : double) {
		this.listeners = listeners;
		this.flow = flow;
		this.cost = cost; 
	}

	override run {
		for (listener : this.listeners) {
			listener.newBestPath(flow, cost)
		}
	}
	
}
